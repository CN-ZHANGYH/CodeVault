(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{454:function(e,t,r){"use strict";r.r(t);var s=r(7),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"kubernetes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes"}},[e._v("#")]),e._v(" Kubernetes")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/cn-zhangyh/image/main/img/202204211354753.png",alt:"img"}})]),e._v(" "),t("h3",{attrs:{id:"kubernetes-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-简介"}},[e._v("#")]),e._v(" Kubernetes 简介")]),e._v(" "),t("p",[t("code",[e._v("Kubernetes 是 Google 团队发起的⼀个开源项⽬，它的⽬标是管理跨多个主机的容器，⽤于⾃动部 署、扩展和管理容器化的应⽤程序，主要实现语⾔为 Go 语⾔。")]),e._v("Kubernetes   的组件和架构还是相对较 复杂的，如果我们⼀上来就给⼤家讲解这些概念，可能很多同学都消化不了，所以我们先让我们的同 学来使⽤我们的Kubernetes，去感受下，去体验下⾥⾯的⼀些概念和⽤法，等你对这些基本概念熟悉 以后，再来给⼤家讲解Kubernetes的组件和架构应该就更加容易了。")]),e._v(" "),t("p",[e._v("怎样体验呢？当然最好的办法就是我们⾃⼰搭建⼀套集群了，但是如果完完全全都我们⼿动去搭建的 话，第⼀是太耗时，第⼆是太复杂，可能我们现在还没有这个实⼒，没关系，我们可以使⽤⼀些⼯具 来辅助我们。")]),e._v(" "),t("p",[e._v("Kubernetes是容器集群管理系统，是一个开源的平台，可以实现容器集群的自动化部署、自动扩缩容、维护等功能。")]),e._v(" "),t("h3",{attrs:{id:"为什么要用kubernetes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用kubernetes"}},[e._v("#")]),e._v(" 为什么要用Kubernetes")]),e._v(" "),t("p",[t("code",[e._v("使用Kubernetes的理由很多，最重要的理由是，IT行业从来都是由 新技术驱动的。")])]),e._v(" "),t("p",[e._v("当前，Docker这门容器化技术已经被很多公司采用，从单机走向集 群已成为必然，云计算的蓬勃发展正在加速这一进程。Kubernetes作为 当前被业界广泛认可和看好的基于Docker的大规模容器化分布式系统解 决方案，得到了以谷歌为首的IT巨头们的大力宣传和持续推进。")]),e._v(" "),t("h3",{attrs:{id:"通过kubernetes你可以"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过kubernetes你可以"}},[e._v("#")]),e._v(" 通过Kubernetes你可以：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("快速部署应用")])]),e._v(" "),t("li",[t("code",[e._v("快速扩展应用")])]),e._v(" "),t("li",[t("code",[e._v("无缝对接新的应用功能")])]),e._v(" "),t("li",[t("code",[e._v("节省资源，优化硬件资源的使用")])])]),e._v(" "),t("h3",{attrs:{id:"kubernetes-特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-特点"}},[e._v("#")]),e._v(" Kubernetes 特点")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("可移植")]),e._v(": 支持公有云，私有云，混合云，多重云（multi-cloud）")]),e._v(" "),t("li",[t("strong",[e._v("可扩展")]),e._v(": 模块化, 插件化, 可挂载, 可组合")]),e._v(" "),t("li",[t("strong",[e._v("自动化")]),e._v(": 自动部署，自动重启，自动复制，自动伸缩/扩展")])]),e._v(" "),t("h3",{attrs:{id:"why-containers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#why-containers"}},[e._v("#")]),e._v(" Why containers?")]),e._v(" "),t("p",[e._v("右图为Kubernetes")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/cn-zhangyh/image/main/img/202204211355985.png",alt:"img"}})]),e._v(" "),t("ul",[t("li",[e._v("传统的应用部署方式是通过插件或脚本来安装应用。这样做的缺点是应用的运行、配置、管理、所有生存周期将与当前操作系统绑定，这样做并不利于应用的升级更新/回滚等操作，当然也可以通过创建虚机的方式来实现某些功能，但是虚拟机非常重，并不利于可移植性。")]),e._v(" "),t("li",[e._v("新的方式是通过部署容器方式实现，每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。相对于虚拟机，容器能快速部署，由于容器与底层设施、机器文件系统解耦的，所以它能在不同云、不同版本操作系统间进行迁移。")]),e._v(" "),t("li",[e._v("容器占用资源少、部署快，每个应用可以被打包成一个容器镜像，每个应用与容器间成一对一关系也使容器有更大优势，使用容器可以在build或release 的阶段，为应用创建容器镜像，因为每个应用不需要与其余的应用堆栈组合，也不依赖于生产环境基础结构，这使得从研发到测试、生产能提供一致环境。类似地，容器比虚机轻量、更“透明”，这更便于监控和管理。")])]),e._v(" "),t("h3",{attrs:{id:"容器优势总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器优势总结"}},[e._v("#")]),e._v(" 容器优势总结：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("快速创建/部署应用：")]),e._v("   与VM虚拟机相比，容器镜像的创建更加容易。")]),e._v(" "),t("li",[t("strong",[e._v("持续开发、集成和部署：")]),e._v("    提供可靠且频繁的容器镜像构建/部署，并使用快速和简单的回滚(由于镜像不可变性)。")]),e._v(" "),t("li",[t("strong",[e._v("开发和运行相分离：")]),e._v("    在build或者release阶段创建容器镜像，使得应用和基础设施解耦。")]),e._v(" "),t("li",[t("strong",[e._v("开发，测试和生产环境一致性：")]),e._v("  在本地或外网（生产环境）运行的一致性。")]),e._v(" "),t("li",[t("strong",[e._v("云平台或其他操作系统：")]),e._v("    可以在 Ubuntu、RHEL、 CoreOS、on-prem、Google Container Engine或其它任何环境中运行。")]),e._v(" "),t("li",[t("strong",[e._v("Loosely coupled，分布式，弹性，微服务化：")]),e._v(" 应用程序分为更小的、独立的部件，可以动态部署和管理。")]),e._v(" "),t("li",[t("strong",[e._v("资源隔离")])]),e._v(" "),t("li",[t("strong",[e._v("资源利用：")]),e._v("    更高效")])]),e._v(" "),t("h3",{attrs:{id:"使用kubernetes能做什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用kubernetes能做什么"}},[e._v("#")]),e._v(" 使用Kubernetes能做什么？")]),e._v(" "),t("p",[e._v("可以在物理或虚拟机的Kubernetes集群上运行容器化应用，Kubernetes能提供一个以“"),t("strong",[e._v("容器为中心的基础架构")]),e._v("”，满足在生产环境中运行应用的一些常见需求，如：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://docs.kubernetes.org.cn/312.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("多个进程（作为容器运行）协同工作。"),t("OutboundLink")],1),e._v("（Pod）")]),e._v(" "),t("li",[e._v("存储系统挂载")]),e._v(" "),t("li",[e._v("Distributing secrets")]),e._v(" "),t("li",[e._v("应用健康检测")]),e._v(" "),t("li",[t("a",{attrs:{href:"http://docs.kubernetes.org.cn/314.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("应用实例的复制"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Pod自动伸缩/扩展")]),e._v(" "),t("li",[e._v("Naming and discovering")]),e._v(" "),t("li",[e._v("负载均衡")]),e._v(" "),t("li",[e._v("滚动更新")]),e._v(" "),t("li",[e._v("资源监控")]),e._v(" "),t("li",[e._v("日志访问")]),e._v(" "),t("li",[e._v("调试应用程序")]),e._v(" "),t("li",[t("a",{attrs:{href:"http://docs.kubernetes.org.cn/51.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("提供认证和授权"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"kubernetes不是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes不是什么"}},[e._v("#")]),e._v(" Kubernetes不是什么？")]),e._v(" "),t("p",[t("code",[e._v("Kubernetes并不是传统的PaaS（平台即服务）系统。")])]),e._v(" "),t("ul",[t("li",[e._v("Kubernetes不限制支持应用的类型，不限制应用框架。不限制受支持的语言runtimes (例如, Java, Python, Ruby)，满足"),t("a",{attrs:{href:"https://12factor.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("12-factor applications"),t("OutboundLink")],1),e._v(" 。不区分 “apps” 或者“services”。 Kubernetes支持不同负载应用，包括有状态、无状态、数据处理类型的应用。只要这个应用可以在容器里运行，那么就能很好的运行在Kubernetes上。")]),e._v(" "),t("li",[e._v("Kubernetes不提供中间件（如message buses）、数据处理框架（如Spark）、数据库(如Mysql)或者集群存储系统(如Ceph)作为内置服务。但这些应用都可以运行在Kubernetes上面。")]),e._v(" "),t("li",[e._v("Kubernetes不部署源码不编译应用。持续集成的 (CI)工作流方面，不同的用户有不同的需求和偏好的区域，因此，我们提供分层的 CI工作流，但并不定义它应该如何工作。")]),e._v(" "),t("li",[e._v("Kubernetes允许用户选择自己的日志、监控和报警系统。")]),e._v(" "),t("li",[e._v("Kubernetes不提供或授权一个全面的应用程序配置 语言/系统（例如，"),t("a",{attrs:{href:"https://github.com/google/jsonnet",target:"_blank",rel:"noopener noreferrer"}},[e._v("jsonnet"),t("OutboundLink")],1),e._v("）。")]),e._v(" "),t("li",[e._v("Kubernetes不提供任何机器配置、维护、管理或者自修复系统。")])]),e._v(" "),t("p",[e._v("另一方面，大量的Paas系统都可以运行在Kubernetes上，比如Openshift、Deis、Gondor。可以构建自己的Paas平台，与自己选择的CI系统集成。")]),e._v(" "),t("h3",{attrs:{id:"kubernetes是什么意思-k8s"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes是什么意思-k8s"}},[e._v("#")]),e._v(" Kubernetes是什么意思？K8S？")]),e._v(" "),t("p",[t("strong",[e._v("Kubernetes")]),e._v("的名字来自希腊语，意思是“"),t("em",[e._v("舵手”")]),e._v(" 或 “"),t("em",[e._v("领航员”")]),e._v("。"),t("em",[e._v("K8s")]),e._v("是将8个字母“ubernete”替换为“8”的缩写。")])])}),[],!1,null,null,null);t.default=n.exports}}]);
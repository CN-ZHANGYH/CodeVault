(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{357:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ansible-playbook-实战入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ansible-playbook-实战入门"}},[t._v("#")]),t._v(" Ansible PlayBook 实战入门")]),t._v(" "),a("h4",{attrs:{id:"掌握要点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#掌握要点"}},[t._v("#")]),t._v(" 掌握要点")]),t._v(" "),a("blockquote",[a("p",[t._v("（1）掌握 Ansible PlayBook 的语法。")]),t._v(" "),a("p",[t._v("（2）了解 PlayBook 与 Shell 脚本的差异。")]),t._v(" "),a("p",[t._v("（3）熟练使用 PlayBook 部署服务。")])]),t._v(" "),a("h4",{attrs:{id:"节点规划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点规划"}},[t._v("#")]),t._v(" 节点规划")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("IP")])]),t._v(" "),a("th",[t._v("主机名")]),t._v(" "),a("th",[t._v("节点")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("192.168.200.11")]),t._v(" "),a("td",[t._v("ansible")]),t._v(" "),a("td",[t._v("Ansible  节点")])]),t._v(" "),a("tr",[a("td",[t._v("192.168.200.12")]),t._v(" "),a("td",[t._v("node1")]),t._v(" "),a("td",[t._v("Node  节点")])])])]),t._v(" "),a("h4",{attrs:{id:"playbook-语法介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#playbook-语法介绍"}},[t._v("#")]),t._v(" PlayBook 语法介绍")]),t._v(" "),a("p",[t._v("（1）YAML 语言介绍")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("PlayBook 是由一个或多个“play”组成的列表。 play 的主要功能在于将事先归并为一组的主机装扮成事先通过 Ansibe 中的 Task 定义好的角色。从根本上来讲，所谓 Task 无非是调用 Ansible 的 module。将多个 play 组织在一个 PlayBook 中，即可让它们联同起来按事先编排的机制运行。")])]),t._v(" "),a("li",[a("p",[t._v("PlayBook 由 YMAL 语言编写。YAML 是一个可读性高的用来表达资料序列的格式。YAML 参考了其他多种语言，包括 XML、C 语言、Python、Perl 以及电子邮件格式 RFC2822 等。")])]),t._v(" "),a("li",[a("p",[t._v("YAML Ain't Markup Language，即 YAML 不是 XML。不过，在开发这种语言时，YAML 的意思其实是“Yet Another Markup Language”（仍是一种标记语言）。其特性和格式如下：特性：")])])]),t._v(" "),a("p",[t._v("​\t\t⚫YAML 的可读性好；")]),t._v(" "),a("p",[t._v("​\t\t⚫YAML 和脚本语言的交互性好；")]),t._v(" "),a("p",[t._v("​\t\t⚫YAML 使用实现语言的数据类型；")]),t._v(" "),a("p",[t._v("​\t\t⚫YAML 有一个一致的信息模型；")]),t._v(" "),a("p",[t._v("​\t\t⚫YAML 易于实现；")]),t._v(" "),a("p",[t._v("​\t\t⚫YAML 可以基于流来处理；")]),t._v(" "),a("p",[t._v("​\t\t⚫YAML 表达能力强，扩展性好。")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("格式： \nexample  \n   |--group_vars/  \n      |--all  \n   |--roles/  \n      |--install  \n         |--tasks  \n            |--main.yaml  \n   |--install.yaml  \n|--deploy.json \n")])])]),a("p",[t._v("（2）YMAL 基本语法以一个简单的 PlayBook 为例，说明 YAML 的基本语法。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hosts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hosts\t\t\t\t\t     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#指定主机")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("remote_user")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" root\t\t\t\t\t "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#指定在被管理的主机上执行任务的用户")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tasks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t\t\t\t\t\t    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#任务列表")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" disable selinux\t\t\t "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#任务名关闭防火墙")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/sbin/seletenforce 0'")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#调用command模块 执行关闭防火墙命令")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" start httpd\t\t\t     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#任务名开启httpd")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" name=httpd state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("started "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#调用service模块，开启httpd")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v('⚫YAML 文件以**“---”**开头，以表明这是一个 YAML 文件，就像 XML 文件在开头使用<?xml version="1.0" encoding="utf-8"?>宣称它是 XML 文件一样。但即使没有使用---开头，也不会有什么影响。')]),t._v(" "),a("p",[t._v("⚫YAML 中使用“#”作为注释符，可以注释整行，也可以注释行内从**“#”**开始的内容。")])]),t._v(" "),a("h4",{attrs:{id:"playbook与shell脚本差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#playbook与shell脚本差异"}},[t._v("#")]),t._v(" PlayBook与Shell脚本差异")]),t._v(" "),a("p",[t._v("（1）Shell 脚本与 PlayBook 的转换")]),t._v(" "),a("p",[t._v("传统的部署方式是通过编写 Shell 脚本在主机上运行部署任务，这种方式也是目前很多团队的现状。但鉴于Ansible的优势，越来越多的团队开始采用Ansible 来实现 DevOps，因此需要将现有的 Shell 脚本修改为 Ansible 的 PlayBook，可以使用以下 2 种方法：")]),t._v(" "),a("p",[t._v("1.Shell 脚本与 PlayBook 的转换如下是一个安装 Apache 的 Shell 脚本：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/bin/bash  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入相应目录下载应用包  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /usr/local/devcloud/apache-tomcat-7.0.61/webapps/  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$app_url")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置权限 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("755")]),t._v(" TempTest-Tomcat_war.war  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动 Apache，并设置开机启动  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" tomcat start      \n")])])]),a("p",[t._v("转换为一个完整的 PlayBook 后：")]),t._v(" "),a("p",[t._v("将以下内容放在 main.yaml 文件中，创建一个 PlayBook 即可运行，运行结果和脚本运行结果一致。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 下载应用包  \n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("copy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" src="),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("app_url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("/tomcat/TempTest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Tomcat_war.war dest=/usr/local/devcloud/apache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("tomcat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("7.0.61/webapps/ mode=755  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 启动 Tomcat  \n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" name=tomcat state=started enabled=yes      \n")])])]),a("p",[t._v("2.使用 PlayBook 调用 Shell 脚本如果现有的 Shell 脚本过于复杂，改为 PlayBook 耗时较长，可以编写简单的PlayBook 去调用现有的 Shell 脚本，如下：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mkdir /tmp/test      \n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" path=/tmp/test state=directory mode=0755  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" copy install.sh  \n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" src=install.sh dest=/tmp/test/  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" excute install.sh      \n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" chdir=/tmp/test sh install.sh       \n")])])]),a("blockquote",[a("p",[a("strong",[t._v("以上 PlayBook 流程如下：")])]),t._v(" "),a("p",[t._v("在“file”模块创建一个临时目录“/tmp/test”。然后使用“template”模块将现有的 shell 脚本“install.sh”复制到“/tmp/test”。最后用“command”来执行这个 shell 脚本。")])]),t._v(" "),a("p",[t._v("（2）Shell 脚本与 PlayBook 的差异")]),t._v(" "),a("p",[t._v("当把 Shell 脚本转换为 Ansible PlayBook 运行的时候，Ansible 会留下清晰的执行痕迹，明确告诉运维人员在每一台主机上的每一步都做了什么。同时，Ansible 自带幂等判断机制也为运维省去不少伤脑筋费心的人脑逻辑判断运算。当重复执行一个 PlayBook 时，当 Ansible 发现系统的现有状态与 PlayBook 所定义的将要实现的状态一致时，Ansible 将自动跳过该操作。再次执行 PlayBook，当 Ansible 发现 PlayBook 中的 play 都已完成时，它将直接返回 OK 状态码，速度非常之快。如果是 Shell 脚本，肯定会把所用操作再做一遍。")]),t._v(" "),a("p",[t._v("在正式运行 PlayBook 之前，可以使用--check 或-C 选项来检测 PlayBook 会改变哪些内容，显示的结果跟真正执行时一模一样，但不会真的对被管理的服务器产生实际影响。")]),t._v(" "),a("h4",{attrs:{id:"部署案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署案例"}},[t._v("#")]),t._v(" 部署案例")]),t._v(" "),a("p",[t._v("使用 PlayBook 配置部署任务，以部署 HTTP 服务为例，首先需要安装 httpd 服务，然后启动 httpd 服务，完成部署。主要包括编写 PlayBook 和执行 PlayBook 两部分。")]),t._v(" "),a("p",[a("strong",[t._v("1.编写PlayBook")])]),t._v(" "),a("p",[a("strong",[t._v("①")]),t._v(" 创建目录创建一个文件夹作为 PlayBook 的根目录，文件夹名称（如 example）即为PlayBook 的名称。")]),t._v(" "),a("p",[t._v("使用远程连接工具连接到 Ansible 节点，创建一个 example 目录，命令如下：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@ansible ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mkdir example ")]),t._v("\n")])])]),a("p",[a("strong",[t._v("②")]),t._v(" 编写 install.yaml 文件")]),t._v(" "),a("p",[t._v("进入 example 目录，创建 install.yaml 文件，该文件是安装动作的入口文件。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@ansible example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cat install.yaml  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hosts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hosts \n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("remote_user")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" root \n  \n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("roles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" httpd \n")])])]),a("blockquote",[a("p",[a("strong",[t._v("说明：")])]),t._v(" "),a("p",[t._v("hosts: hosts 和 remote_user: root 表示在 hosts 这个组执行该 PlayBook，用 root 用户的权限执行。")]),t._v(" "),a("p",[t._v("roles 下面的 httpd 表示执行部署脚本目录下的 roles/httpd/tasks/main.yaml 文件。")])]),t._v(" "),a("p",[a("strong",[t._v("③")]),t._v(" 编写 main.yaml 文件")]),t._v(" "),a("p",[t._v("编写 roles/httpd/tasks/main.yaml 文件。在 example 目录下新建 roles 目录，在 roles 目录下新建 httpd 目录，然后在 httpd 目录下新建 tasks 目录，最后在 tasks 目录下新建 main.yaml 文件。其中，httpd 目录的名称要和步骤②中 install.yaml 文件中 roles 下面定义的httpd 名称一致，其余的 roles 目录、tasks 目录和 main.yaml 的名称都是固定的。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@ansible example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cat roles/httpd/tasks/main.yaml ")]),t._v("\n---\n- name: stop fireawlld \n  command: systemctl stop firewalld \n- name: disable selinux \n  command: setenforce "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n- name: yum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" httpd \n  yum:\n    name: httpd \n    state: present \n- name: Start httpd \n  service: \n    name: httpd \n    state: started \n    enabled: "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yes")]),t._v(" \n")])])]),a("p",[a("strong",[t._v("④")]),t._v(" 编写 group_vars/all 文件")]),t._v(" "),a("p",[t._v("在 example 目录里，新建 group_vars 目录，该名称是固定的，用来存放变量声明文件。在 group_vars 目录下，新建 all 文件，这个名称也是固定的。all 文件的内容如下：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("vars1: aaa \nvars2: bbb       \n")])])]),a("p",[a("strong",[t._v("2.执行PlayBook")])]),t._v(" "),a("p",[t._v("在执行 PlayBook 前，可以先查看该 PlayBook 执行时，哪些主机将会受到影响，使用--list-hosts 参数")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@ansible example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ansible-playbook  install.yaml  --list-hosts    ")]),t._v("\n\nplaybook: install.yaml\n\n  play "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#1 (hosts): hosts        TAGS: []")]),t._v("\n    pattern: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("u"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hosts'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    hosts "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".100.12\n")])])]),a("p",[t._v("执行 PlayBook 完毕后，可使用浏览器访问 node1 节点的 IP 地址，会显示 httpd 服务的测试界面")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/cn-zhangyh/image/main/img/202204111158700.png",alt:"image-20220216095151439"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);